{"version":3,"sources":["src/html-imports.js"],"names":["scope","newCustomEvent","type","params","window","CustomEvent","event","document","createEvent","initCustomEvent","bubbles","cancelable","detail","importForElement","element","useNative","ownerDocument","doc","parentNode","closest","importSelector","isImportLink","whenImportsReady","callback","imports","querySelectorAll","rootImportSelector","pending","length","forEach","imp","whenElementLoaded","whenDocumentReady","stateChanged","readyState","body","removeEventListener","addEventListener","whenReady","localName","src","firstChild","onLoadingDone","isIE","node","nodeType","Node","ELEMENT_NODE","rel","constructor","Importer","documents","inflight","dynamicImportsMO","MutationObserver","m","handleMutations","observe","head","childList","subtree","loadImports","list","inverseOrder","increment","i","createElement","currentScript","Object","defineProperty","get","scripts","configurable","CSS_URL_REGEXP","CSS_IMPORT_REGEXP","STYLESHEET_REGEXP","Path","fixUrls","base","href","setAttribute","resolveUrl","getAttribute","r","replaceUrls","textContent","text","linkUrl","regexp","replace","pre","url","post","urlPath","undefined","__workingURL","u","URL","pathname","e","__tempDoc","implementation","createHTMLDocument","__base","appendChild","__anchor","Xhr","async","load","success","fail","match","pieces","split","resource","header","indexOf","atob","decodeURIComponent","request","XMLHttpRequest","open","onload","request.onload","redirectedUrl","responseURL","getResponseHeader","location","origin","protocol","host","response","responseText","status","send","test","navigator","userAgent","links","link","loadImport","import","fireEventIfNeeded","makeDocument","processImportsIfLoadingDone","createDocumentFragment","p1","p2","template","innerHTML","content","baseEl","querySelector","removeAttribute","inlineScriptIndex","n$","importDependenciesSelector","n","importDependencyAttr","encodeURIComponent","num","disconnect","flatten","scriptsOk","stylesOk","fireEvents","waitForStyles","runScripts","DOCUMENT_FRAGMENT_NODE","cloneScript","l","s","s$","clone","attributes","attr","name","value","replaceChild","pendingScriptsSelector","pendingStylesSelector","needsMove","disabledLinkSelector","placeholder","insertBefore","nextSibling","newSibling","dispatchEvent","eventType","mutations","addedNodes","elem","imps","target","native_baseURI","getOwnPropertyDescriptor","prototype","klass","Element","ownerDoc","call","enumerable","HTMLImports"],"mappings":"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","file":"html-imports.min.js","sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n(scope => {\r\n\r\n  /********************* base setup *********************/\r\n  const useNative = Boolean('import' in document.createElement('link'));\r\n\r\n  // Polyfill `currentScript` for browsers without it.\r\n  let currentScript = null;\r\n  if ('currentScript' in document === false) {\r\n    Object.defineProperty(document, 'currentScript', {\r\n      get() {\r\n        return currentScript ||\r\n          // NOTE: only works when called in synchronously executing code.\r\n          // readyState should check if `loading` but IE10 is\r\n          // interactive when scripts run so we cheat. This is not needed by\r\n          // html-imports polyfill but helps generally polyfill `currentScript`.\r\n          (document.readyState !== 'complete' ?\r\n            document.scripts[document.scripts.length - 1] : null);\r\n      },\r\n      configurable: true\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {Array|NodeList|NamedNodeMap} list\r\n   * @param {!Function} callback\r\n   * @param {boolean=} inverseOrder\r\n   */\r\n  const forEach = (list, callback, inverseOrder) => {\r\n    const length = list ? list.length : 0;\r\n    const increment = inverseOrder ? -1 : 1;\r\n    let i = inverseOrder ? length - 1 : 0;\r\n    for (; i < length && i >= 0; i = i + increment) {\r\n      callback(list[i], i);\r\n    }\r\n  };\r\n\r\n  /********************* path fixup *********************/\r\n  const CSS_URL_REGEXP = /(url\\()([^)]*)(\\))/g;\r\n  const CSS_IMPORT_REGEXP = /(@import[\\s]+(?!url\\())([^;]*)(;)/g;\r\n  const STYLESHEET_REGEXP = /(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g;\r\n\r\n  // path fixup: style elements in imports must be made relative to the main\r\n  // document. We fixup url's in url() and @import.\r\n  const Path = {\r\n\r\n    fixUrls(element, base) {\r\n      if (element.href) {\r\n        element.setAttribute('href',\r\n          Path.resolveUrl(element.getAttribute('href'), base));\r\n      }\r\n      if (element.src) {\r\n        element.setAttribute('src',\r\n          Path.resolveUrl(element.getAttribute('src'), base));\r\n      }\r\n      if (element.localName === 'style') {\r\n        const r = Path.replaceUrls(element.textContent, base, CSS_URL_REGEXP);\r\n        element.textContent = Path.replaceUrls(r, base, CSS_IMPORT_REGEXP);\r\n      }\r\n    },\r\n\r\n    replaceUrls(text, linkUrl, regexp) {\r\n      return text.replace(regexp, (m, pre, url, post) => {\r\n        let urlPath = url.replace(/[\"']/g, '');\r\n        if (linkUrl) {\r\n          urlPath = Path.resolveUrl(urlPath, linkUrl);\r\n        }\r\n        return pre + '\\'' + urlPath + '\\'' + post;\r\n      });\r\n    },\r\n\r\n    resolveUrl(url, base) {\r\n      // Lazy feature detection.\r\n      if (Path.__workingURL === undefined) {\r\n        Path.__workingURL = false;\r\n        try {\r\n          const u = new URL('b', 'http://a');\r\n          u.pathname = 'c%20d';\r\n          Path.__workingURL = (u.href === 'http://a/c%20d');\r\n        } catch (e) {}\r\n      }\r\n\r\n      if (Path.__workingURL) {\r\n        return (new URL(url, base)).href;\r\n      }\r\n\r\n      // Fallback to creating an anchor into a disconnected document.\r\n      let doc = Path.__tempDoc;\r\n      if (!doc) {\r\n        doc = document.implementation.createHTMLDocument('temp');\r\n        Path.__tempDoc = doc;\r\n        doc.__base = doc.createElement('base');\r\n        doc.head.appendChild(doc.__base);\r\n        doc.__anchor = doc.createElement('a');\r\n      }\r\n      doc.__base.href = base;\r\n      doc.__anchor.href = url;\r\n      return doc.__anchor.href || url;\r\n    }\r\n  };\r\n\r\n  /********************* Xhr processor *********************/\r\n  const Xhr = {\r\n\r\n    async: true,\r\n\r\n    /**\r\n     * @param {!string} url\r\n     * @param {!function(!string, string=)} success\r\n     * @param {!function(!string)} fail\r\n     */\r\n    load(url, success, fail) {\r\n      if (!url) {\r\n        fail('error: href must be specified');\r\n      } else if (url.match(/^data:/)) {\r\n        // Handle Data URI Scheme\r\n        const pieces = url.split(',');\r\n        const header = pieces[0];\r\n        let resource = pieces[1];\r\n        if (header.indexOf(';base64') > -1) {\r\n          resource = atob(resource);\r\n        } else {\r\n          resource = decodeURIComponent(resource);\r\n        }\r\n        success(resource);\r\n      } else {\r\n        const request = new XMLHttpRequest();\r\n        request.open('GET', url, Xhr.async);\r\n        request.onload = () => {\r\n          // Servers redirecting an import can add a Location header to help us\r\n          // polyfill correctly. Handle relative and full paths.\r\n          // Prefer responseURL which already resolves redirects\r\n          // https://xhr.spec.whatwg.org/#the-responseurl-attribute\r\n          let redirectedUrl = request.responseURL || request.getResponseHeader('Location');\r\n          if (redirectedUrl && redirectedUrl.indexOf('/') === 0) {\r\n            // In IE location.origin might not work\r\n            // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7\r\n            const origin = (location.origin || location.protocol + '//' + location.host);\r\n            redirectedUrl = origin + redirectedUrl;\r\n          }\r\n          const resource = /** @type {string} */ (request.response || request.responseText);\r\n          if (request.status === 304 || request.status === 0 ||\r\n            request.status >= 200 && request.status < 300) {\r\n            success(resource, redirectedUrl);\r\n          } else {\r\n            fail(resource);\r\n          }\r\n        };\r\n        request.send();\r\n      }\r\n    }\r\n  };\r\n\r\n  /********************* importer *********************/\r\n\r\n  const isIE = /Trident/.test(navigator.userAgent) ||\r\n    /Edge\\/\\d./i.test(navigator.userAgent);\r\n\r\n  const importSelector = 'link[rel=import]';\r\n\r\n  // Used to disable loading of resources.\r\n  const importDisableType = 'import-disable';\r\n\r\n  const disabledLinkSelector = `link[rel=stylesheet][href][type=${importDisableType}]`;\r\n\r\n  const importDependenciesSelector = `${importSelector}, ${disabledLinkSelector},\r\n    style:not([type]), link[rel=stylesheet][href]:not([type]),\r\n    script:not([type]), script[type=\"application/javascript\"],\r\n    script[type=\"text/javascript\"]`;\r\n\r\n  const importDependencyAttr = 'import-dependency';\r\n\r\n  const rootImportSelector = `${importSelector}:not([${importDependencyAttr}])`;\r\n\r\n  const pendingScriptsSelector = `script[${importDependencyAttr}]`;\r\n\r\n  const pendingStylesSelector = `style[${importDependencyAttr}],\r\n    link[rel=stylesheet][${importDependencyAttr}]`;\r\n\r\n  /**\r\n   * Importer will:\r\n   * - load any linked import documents (with deduping)\r\n   * - whenever an import is loaded, prompt the parser to try to parse\r\n   * - observe imported documents for new elements (these are handled via the\r\n   *   dynamic importer)\r\n   */\r\n  class Importer {\r\n    constructor() {\r\n      this.documents = {};\r\n      // Used to keep track of pending loads, so that flattening and firing of\r\n      // events can be done when all resources are ready.\r\n      this.inflight = 0;\r\n      this.dynamicImportsMO = new MutationObserver(m => this.handleMutations(m));\r\n      // Observe changes on <head>.\r\n      this.dynamicImportsMO.observe(document.head, {\r\n        childList: true,\r\n        subtree: true\r\n      });\r\n      // 1. Load imports contents\r\n      // 2. Assign them to first import links on the document\r\n      // 3. Wait for import styles & scripts to be done loading/running\r\n      // 4. Fire load/error events\r\n      this.loadImports(document);\r\n    }\r\n\r\n    /**\r\n     * @param {!(HTMLDocument|DocumentFragment|Element)} doc\r\n     */\r\n    loadImports(doc) {\r\n      const links = /** @type {!NodeList<!HTMLLinkElement>} */\r\n        (doc.querySelectorAll(importSelector));\r\n      forEach(links, link => this.loadImport(link));\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLLinkElement} link\r\n     */\r\n    loadImport(link) {\r\n      const url = link.href;\r\n      // This resource is already being handled by another import.\r\n      if (this.documents[url] !== undefined) {\r\n        // If import is already loaded, we can safely associate it to the link\r\n        // and fire the load/error event.\r\n        const imp = this.documents[url];\r\n        if (imp && imp['__loaded']) {\r\n          link.import = imp;\r\n          this.fireEventIfNeeded(link);\r\n        }\r\n        return;\r\n      }\r\n      this.inflight++;\r\n      // Mark it as pending to notify others this url is being loaded.\r\n      this.documents[url] = 'pending';\r\n      Xhr.load(url, (resource, redirectedUrl) => {\r\n        const doc = this.makeDocument(resource, redirectedUrl || url);\r\n        this.documents[url] = doc;\r\n        this.inflight--;\r\n        // Load subtree.\r\n        this.loadImports(doc);\r\n        this.processImportsIfLoadingDone();\r\n      }, () => {\r\n        // If load fails, handle error.\r\n        this.documents[url] = null;\r\n        this.inflight--;\r\n        this.processImportsIfLoadingDone();\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates a new document containing resource and normalizes urls accordingly.\r\n     * @param {string=} resource\r\n     * @param {string=} url\r\n     * @return {!DocumentFragment}\r\n     */\r\n    makeDocument(resource, url) {\r\n      if (!resource) {\r\n        return document.createDocumentFragment();\r\n      }\r\n\r\n      if (isIE) {\r\n        // <link rel=stylesheet> should be appended to <head>. Not doing so\r\n        // in IE/Edge breaks the cascading order. We disable the loading by\r\n        // setting the type before setting innerHTML to avoid loading\r\n        // resources twice.\r\n        resource = resource.replace(STYLESHEET_REGEXP, (match, p1, p2) => {\r\n          if (match.indexOf('type=') === -1) {\r\n            return `${p1} type=${importDisableType} ${p2}`;\r\n          }\r\n          return match;\r\n        });\r\n      }\r\n\r\n      let content;\r\n      const template = /** @type {!HTMLTemplateElement} */\r\n        (document.createElement('template'));\r\n      template.innerHTML = resource;\r\n      if (template.content) {\r\n        // This creates issues in Safari10 when used with shadydom (see #12).\r\n        content = template.content;\r\n      } else {\r\n        // <template> not supported, create fragment and move content into it.\r\n        content = document.createDocumentFragment();\r\n        while (template.firstChild) {\r\n          content.appendChild(template.firstChild);\r\n        }\r\n      }\r\n\r\n      // Support <base> in imported docs. Resolve url and remove its href.\r\n      const baseEl = content.querySelector('base');\r\n      if (baseEl) {\r\n        url = Path.resolveUrl(baseEl.getAttribute('href'), url);\r\n        baseEl.removeAttribute('href');\r\n      }\r\n\r\n      const n$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)>} */\r\n        (content.querySelectorAll(importDependenciesSelector));\r\n      // For source map hints.\r\n      let inlineScriptIndex = 0;\r\n      forEach(n$, n => {\r\n        // Listen for load/error events, then fix urls.\r\n        whenElementLoaded(n);\r\n        Path.fixUrls(n, url);\r\n        // Mark for easier selectors.\r\n        n.setAttribute(importDependencyAttr, '');\r\n        // Generate source map hints for inline scripts.\r\n        if (n.localName === 'script' && !n.src && n.textContent) {\r\n          const num = inlineScriptIndex ? `-${inlineScriptIndex}` : '';\r\n          const content = n.textContent + `\\n//# sourceURL=${url}${num}.js\\n`;\r\n          // We use the src attribute so it triggers load/error events, and it's\r\n          // easier to capture errors (e.g. parsing) like this.\r\n          n.setAttribute('src', 'data:text/javascript;charset=utf-8,' + encodeURIComponent(content));\r\n          n.textContent = '';\r\n          inlineScriptIndex++;\r\n        }\r\n      });\r\n      return content;\r\n    }\r\n\r\n    /**\r\n     * Waits for loaded imports to finish loading scripts and styles, then fires\r\n     * the load/error events.\r\n     */\r\n    processImportsIfLoadingDone() {\r\n      // Wait until all resources are ready, then load import resources.\r\n      if (this.inflight) return;\r\n\r\n      // Stop observing, flatten & load resource, then restart observing <head>.\r\n      this.dynamicImportsMO.disconnect();\r\n      this.flatten(document);\r\n      // We wait for styles to load, and at the same time we execute the scripts,\r\n      // then fire the load/error events for imports to have faster whenReady\r\n      // callback execution.\r\n      // NOTE: This is different for native behavior where scripts would be\r\n      // executed after the styles before them are loaded.\r\n      // To achieve that, we could select pending styles and scripts in the\r\n      // document and execute them sequentially in their dom order.\r\n      let scriptsOk = false,\r\n        stylesOk = false;\r\n      const onLoadingDone = () => {\r\n        if (stylesOk && scriptsOk) {\r\n          // Catch any imports that might have been added while we\r\n          // weren't looking, wait for them as well.\r\n          this.loadImports(document);\r\n          if (this.inflight) return;\r\n\r\n          // Restart observing.\r\n          this.dynamicImportsMO.observe(document.head, {\r\n            childList: true,\r\n            subtree: true\r\n          });\r\n          this.fireEvents();\r\n        }\r\n      }\r\n      this.waitForStyles(() => {\r\n        stylesOk = true;\r\n        onLoadingDone();\r\n      });\r\n      this.runScripts(() => {\r\n        scriptsOk = true;\r\n        onLoadingDone();\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLDocument} doc\r\n     */\r\n    flatten(doc) {\r\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\r\n        (doc.querySelectorAll(importSelector));\r\n      forEach(n$, n => {\r\n        const imp = this.documents[n.href];\r\n        n.import = /** @type {!Document} */ (imp);\r\n        if (imp && imp.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n          // We set the .import to be the link itself, and update its readyState.\r\n          // Other links with the same href will point to this link.\r\n          this.documents[n.href] = n;\r\n          n.readyState = 'loading';\r\n          // Suppress Closure warning about incompatible subtype assignment.\r\n          ( /** @type {!HTMLElement} */ (n).import = n);\r\n          this.flatten(imp);\r\n          n.appendChild(imp);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Replaces all the imported scripts with a clone in order to execute them.\r\n     * Updates the `currentScript`.\r\n     * @param {!function()} callback\r\n     */\r\n    runScripts(callback) {\r\n      const s$ = document.querySelectorAll(pendingScriptsSelector);\r\n      const l = s$.length;\r\n      const cloneScript = i => {\r\n        if (i < l) {\r\n          // The pending scripts have been generated through innerHTML and\r\n          // browsers won't execute them for security reasons. We cannot use\r\n          // s.cloneNode(true) either, the only way to run the script is manually\r\n          // creating a new element and copying its attributes.\r\n          const s = s$[i];\r\n          const clone = /** @type {!HTMLScriptElement} */\r\n            (document.createElement('script'));\r\n          // Remove import-dependency attribute to avoid double cloning.\r\n          s.removeAttribute(importDependencyAttr);\r\n          forEach(s.attributes, attr => clone.setAttribute(attr.name, attr.value));\r\n          // Update currentScript and replace original with clone script.\r\n          currentScript = clone;\r\n          s.parentNode.replaceChild(clone, s);\r\n          whenElementLoaded(clone, () => {\r\n            currentScript = null;\r\n            cloneScript(i + 1);\r\n          });\r\n        } else {\r\n          callback();\r\n        }\r\n      };\r\n      cloneScript(0);\r\n    }\r\n\r\n    /**\r\n     * Waits for all the imported stylesheets/styles to be loaded.\r\n     * @param {!function()} callback\r\n     */\r\n    waitForStyles(callback) {\r\n      const s$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLStyleElement)>} */\r\n        (document.querySelectorAll(pendingStylesSelector));\r\n      let pending = s$.length;\r\n      if (!pending) {\r\n        callback();\r\n        return;\r\n      }\r\n      // <link rel=stylesheet> should be appended to <head>. Not doing so\r\n      // in IE/Edge breaks the cascading order\r\n      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10472273/\r\n      // If there is one <link rel=stylesheet> imported, we must move all imported\r\n      // links and styles to <head>.\r\n      const needsMove = isIE && !!document.querySelector(disabledLinkSelector);\r\n      forEach(s$, s => {\r\n        // Listen for load/error events, remove selector once is done loading.\r\n        whenElementLoaded(s, () => {\r\n          s.removeAttribute(importDependencyAttr);\r\n          if (--pending === 0) {\r\n            callback();\r\n          }\r\n        });\r\n        // Check if was already moved to head, to handle the case where the element\r\n        // has already been moved but it is still loading.\r\n        if (needsMove && s.parentNode !== document.head) {\r\n          // Replace the element we're about to move with a placeholder.\r\n          const placeholder = document.createElement(s.localName);\r\n          // Add reference of the moved element.\r\n          placeholder['__appliedElement'] = s;\r\n          // Disable this from appearing in document.styleSheets.\r\n          placeholder.setAttribute('type', 'import-placeholder');\r\n          // Append placeholder next to the sibling, and move original to <head>.\r\n          s.parentNode.insertBefore(placeholder, s.nextSibling);\r\n          let newSibling = importForElement(s);\r\n          while (newSibling && importForElement(newSibling)) {\r\n            newSibling = importForElement(newSibling);\r\n          }\r\n          if (newSibling.parentNode !== document.head) {\r\n            newSibling = null;\r\n          }\r\n          document.head.insertBefore(s, newSibling);\r\n          // Enable the loading of <link rel=stylesheet>.\r\n          s.removeAttribute('type');\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Fires load/error events for imports in the right order .\r\n     */\r\n    fireEvents() {\r\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\r\n        (document.querySelectorAll(importSelector));\r\n      // Inverse order to have events firing bottom-up.\r\n      forEach(n$, n => this.fireEventIfNeeded(n), true);\r\n    }\r\n\r\n    /**\r\n     * Fires load/error event for the import if this wasn't done already.\r\n     * @param {!HTMLLinkElement} link\r\n     */\r\n    fireEventIfNeeded(link) {\r\n      // Don't fire twice same event.\r\n      if (!link['__loaded']) {\r\n        link['__loaded'] = true;\r\n        // Update link's import readyState.\r\n        link.import && (link.import.readyState = 'complete');\r\n        const eventType = link.import ? 'load' : 'error';\r\n        link.dispatchEvent(newCustomEvent(eventType, {\r\n          bubbles: false,\r\n          cancelable: false,\r\n          detail: undefined\r\n        }));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Array<MutationRecord>} mutations\r\n     */\r\n    handleMutations(mutations) {\r\n      forEach(mutations, m => forEach(m.addedNodes, elem => {\r\n        if (elem && elem.nodeType === Node.ELEMENT_NODE) {\r\n          // NOTE: added scripts are not updating currentScript in IE.\r\n          if (isImportLink(elem)) {\r\n            this.loadImport( /** @type {!HTMLLinkElement} */ (elem));\r\n          } else {\r\n            this.loadImports( /** @type {!Element} */ (elem));\r\n          }\r\n        }\r\n      }));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {!Node} node\r\n   * @return {boolean}\r\n   */\r\n  const isImportLink = node => {\r\n    return node.nodeType === Node.ELEMENT_NODE && node.localName === 'link' &&\r\n      ( /** @type {!HTMLLinkElement} */ (node).rel === 'import');\r\n  };\r\n\r\n  /**\r\n   * Waits for an element to finish loading. If already done loading, it will\r\n   * mark the element accordingly.\r\n   * @param {!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)} element\r\n   * @param {function()=} callback\r\n   */\r\n  const whenElementLoaded = (element, callback) => {\r\n    if (element['__loaded']) {\r\n      callback && callback();\r\n    } else if ((element.localName === 'script' && !element.src) ||\r\n      (element.localName === 'style' && !element.firstChild)) {\r\n      // Inline scripts and empty styles don't trigger load/error events,\r\n      // consider them already loaded.\r\n      element['__loaded'] = true;\r\n      callback && callback();\r\n    } else {\r\n      const onLoadingDone = event => {\r\n        element.removeEventListener(event.type, onLoadingDone);\r\n        element['__loaded'] = true;\r\n        callback && callback();\r\n      };\r\n      element.addEventListener('load', onLoadingDone);\r\n      // NOTE: We listen only for load events in IE/Edge, because in IE/Edge\r\n      // <style> with @import will fire error events for each failing @import,\r\n      // and finally will trigger the load event when all @import are\r\n      // finished (even if all fail).\r\n      if (!isIE || element.localName !== 'style') {\r\n        element.addEventListener('error', onLoadingDone);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the callback when all imports in the document at call time\r\n   * (or at least document ready) have loaded. Callback is called synchronously\r\n   * if imports are already done loading.\r\n   * @param {function()=} callback\r\n   */\r\n  const whenReady = callback => {\r\n    // 1. ensure the document is in a ready state (has dom), then\r\n    // 2. watch for loading of imports and call callback when done\r\n    whenDocumentReady(() => whenImportsReady(() => callback && callback()));\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback when document is in ready state. Callback is called\r\n   *  synchronously if document is already done loading.\r\n   * @param {!function()} callback\r\n   */\r\n  const whenDocumentReady = callback => {\r\n    const stateChanged = () => {\r\n      // NOTE: Firefox can hit readystate interactive without document.body existing.\r\n      // This is anti-spec, but we handle it here anyways by waiting for next change.\r\n      if (document.readyState !== 'loading' && !!document.body) {\r\n        document.removeEventListener('readystatechange', stateChanged);\r\n        callback();\r\n      }\r\n    }\r\n    document.addEventListener('readystatechange', stateChanged);\r\n    stateChanged();\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all imports are loaded. Callback is called\r\n   * synchronously if imports are already done loading.\r\n   * @param {!function()} callback\r\n   */\r\n  const whenImportsReady = callback => {\r\n    let imports = /** @type {!NodeList<!HTMLLinkElement>} */\r\n      (document.querySelectorAll(rootImportSelector));\r\n    let pending = imports.length;\r\n    if (!pending) {\r\n      callback();\r\n      return;\r\n    }\r\n    forEach(imports, imp => whenElementLoaded(imp, () => {\r\n      if (--pending === 0) {\r\n        callback();\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Returns the import document containing the element.\r\n   * @param {!Node} element\r\n   * @return {HTMLLinkElement|Document|undefined}\r\n   */\r\n  const importForElement = element => {\r\n    if (useNative) {\r\n      // Return only if not in the main doc!\r\n      return element.ownerDocument !== document ? element.ownerDocument : null;\r\n    }\r\n    let doc = element['__importDoc'];\r\n    if (!doc && element.parentNode) {\r\n      doc = /** @type {!Element} */ (element.parentNode);\r\n      if (typeof doc.closest === 'function') {\r\n        // Element.closest returns the element itself if it matches the selector,\r\n        // so we search the closest import starting from the parent.\r\n        doc = doc.closest(importSelector);\r\n      } else {\r\n        // Walk up the parent tree until we find an import.\r\n        while (!isImportLink(doc) && (doc = doc.parentNode)) {}\r\n      }\r\n      element['__importDoc'] = doc;\r\n    }\r\n    return doc;\r\n  }\r\n\r\n  const newCustomEvent = (type, params) => {\r\n    if (typeof window.CustomEvent === 'function') {\r\n      return new CustomEvent(type, params);\r\n    }\r\n    const event = /** @type {!CustomEvent} */ (document.createEvent('CustomEvent'));\r\n    event.initCustomEvent(type, Boolean(params.bubbles), Boolean(params.cancelable), params.detail);\r\n    return event;\r\n  };\r\n\r\n  if (useNative) {\r\n    // Check for imports that might already be done loading by the time this\r\n    // script is actually executed. Native imports are blocking, so the ones\r\n    // available in the document by this time should already have failed\r\n    // or have .import defined.\r\n    const imps = /** @type {!NodeList<!HTMLLinkElement>} */\r\n      (document.querySelectorAll(importSelector));\r\n    forEach(imps, imp => {\r\n      if (!imp.import || imp.import.readyState !== 'loading') {\r\n        imp['__loaded'] = true;\r\n      }\r\n    });\r\n    // Listen for load/error events to capture dynamically added scripts.\r\n    /**\r\n     * @type {!function(!Event)}\r\n     */\r\n    const onLoadingDone = event => {\r\n      const elem = /** @type {!Element} */ (event.target);\r\n      if (isImportLink(elem)) {\r\n        elem['__loaded'] = true;\r\n      }\r\n    };\r\n    document.addEventListener('load', onLoadingDone, true /* useCapture */ );\r\n    document.addEventListener('error', onLoadingDone, true /* useCapture */ );\r\n  } else {\r\n    // Override baseURI so that imported elements' baseURI can be used seemlessly\r\n    // on native or polyfilled html-imports.\r\n    // NOTE: a <link rel=import> will have `link.baseURI === link.href`, as the link\r\n    // itself is used as the `import` document.\r\n    /** @type {Object|undefined} */\r\n    const native_baseURI = Object.getOwnPropertyDescriptor(Node.prototype, 'baseURI');\r\n    // NOTE: if not configurable (e.g. safari9), set it on the Element prototype. \r\n    const klass = !native_baseURI || native_baseURI.configurable ? Node : Element;\r\n    Object.defineProperty(klass.prototype, 'baseURI', {\r\n      get() {\r\n        const ownerDoc = /** @type {HTMLLinkElement} */ (isImportLink(this) ? this : importForElement(this));\r\n        if (ownerDoc) return ownerDoc.href;\r\n        // Use native baseURI if possible.\r\n        if (native_baseURI && native_baseURI.get) return native_baseURI.get.call(this);\r\n        // Polyfill it if not available.\r\n        const base = /** @type {HTMLBaseElement} */ (document.querySelector('base'));\r\n        return (base || window.location).href;\r\n      },\r\n      configurable: true,\r\n      enumerable: true\r\n    });\r\n\r\n    whenDocumentReady(() => new Importer());\r\n  }\r\n\r\n  /**\r\n    Add support for the `HTMLImportsLoaded` event and the `HTMLImports.whenReady`\r\n    method. This api is necessary because unlike the native implementation,\r\n    script elements do not force imports to resolve. Instead, users should wrap\r\n    code in either an `HTMLImportsLoaded` handler or after load time in an\r\n    `HTMLImports.whenReady(callback)` call.\r\n\r\n    NOTE: This module also supports these apis under the native implementation.\r\n    Therefore, if this file is loaded, the same code can be used under both\r\n    the polyfill and native implementation.\r\n   */\r\n  whenReady(() => document.dispatchEvent(newCustomEvent('HTMLImportsLoaded', {\r\n    cancelable: true,\r\n    bubbles: true,\r\n    detail: undefined\r\n  })));\r\n\r\n  // exports\r\n  scope.useNative = useNative;\r\n  scope.whenReady = whenReady;\r\n  scope.importForElement = importForElement;\r\n\r\n})(window.HTMLImports = (window.HTMLImports || {}));"]}